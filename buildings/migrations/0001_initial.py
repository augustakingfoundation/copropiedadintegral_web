# Generated by Django 2.0.5 on 2018-06-01 17:40

import app.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('place', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='nombre')),
                ('document_type', models.PositiveSmallIntegerField(choices=[(1, 'C.C.'), (2, 'NIT'), (3, 'Otro')], verbose_name='tipo de documento')),
                ('document_number', models.CharField(max_length=32, unique=True, verbose_name='documento/Nit')),
                ('logo', models.ImageField(blank=True, help_text='150x150', max_length=255, upload_to='', validators=[app.validators.FileSizeValidator(4000)])),
                ('address', models.CharField(blank=True, max_length=50, verbose_name='dirección')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='correo electrónico')),
                ('mobile_phone', models.CharField(blank=True, default='', error_messages={'min_length': 'Ingrese al menos %(limit_value)d caracteres, (actualmente tiene %(show_value)d).'}, help_text='Si desea ingresar más de un número celular, estos deben ir separados por coma (,).', max_length=32, validators=[django.core.validators.RegexValidator('^[0-9 ,]*$', message='El dato no es válido, sólo debe ingresar números. Si desea ingresar más de un número celular, estos deben estar separados por coma (,).'), django.core.validators.MinLengthValidator(10)], verbose_name='número celular')),
                ('phone_number', models.CharField(blank=True, error_messages={'min_length': 'El campo "Número telefónico" debe tener al menos %(limit_value)d dígitos (actualmente tiene %(show_value)d).'}, help_text='Si desea ingresar más de un número telefónico, estos deben ir separados por coma (,).', max_length=32, validators=[django.core.validators.RegexValidator('^[0-9 ,]*$', message='El dato no es válido, sólo se permiten números. Si desea ingresar más de un número telefónico, estos deben estar separados por coma (,).'), django.core.validators.MinLengthValidator(6)], verbose_name='número telefónico')),
                ('initial_period', models.DateField(blank=True, verbose_name='periodo inicial')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='place.City', verbose_name='ciudad')),
            ],
            options={
                'verbose_name': 'copropiedad',
                'verbose_name_plural': 'copropiedades',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='BuildingMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_administrator', models.BooleanField(default=False, verbose_name='administrador')),
                ('is_administrative_assistant', models.BooleanField(default=False, verbose_name='asistente administrativo')),
                ('is_accountant', models.BooleanField(default=False, verbose_name='contador')),
                ('is_accounting_assistant', models.BooleanField(default=False, verbose_name='asistente contable')),
                ('is_fiscal_reviewer', models.BooleanField(default=False, verbose_name='revisor fiscal')),
                ('is_active', models.BooleanField(default=False, verbose_name='membresía activa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='buildings.Building', verbose_name='copropiedad')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='usuario')),
            ],
            options={
                'verbose_name': 'membresía',
                'verbose_name_plural': 'membresías',
                'ordering': ('created_at',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='buildingmembership',
            unique_together={('user', 'building')},
        ),
    ]
